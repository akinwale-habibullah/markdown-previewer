{"version":3,"sources":["components/editor/Editor.js","components/previewer/Previewer.js","App.js","serviceWorker.js","index.js"],"names":["EditorComponent","props","className","id","onKeyUp","e","markdown","target","value","submitMarkDown","htmlFor","PreviewerComponent","html","__html","htmlOutput","dangerouslySetInnerHTML","App","state","bind","str","Remarkable","breaks","render","this","setState","Editor","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUAqBeA,G,iBAjBS,SAACC,GAMvB,OACE,6BACE,+CACA,yBAAKC,UAAU,uBACb,8BAAUC,GAAG,YAAYD,UAAU,uBAAuBE,QAThE,SAA0BC,GACxB,IAAMC,EAAWD,EAAEE,OAAOC,MAC1BP,EAAMQ,eAAeH,MAQjB,2BAAOI,QAAQ,aAAf,2BCAOC,G,MAZY,SAACV,GAC1B,IAAMW,EAAO,CACXC,OAAQZ,EAAMa,YAEhB,OACE,6BACE,yCACCb,EAAMa,WAAa,yBAAKC,wBAAyBH,IAAU,qECmCnDI,E,YArCb,WAAYf,GAAO,IAAD,8BAChB,4CAAMA,KACDgB,MAAQ,CACXH,WAAY,IAGd,EAAKL,eAAiB,EAAKA,eAAeS,KAApB,gBANN,E,4EASHC,GACb,IAIML,EAJK,IAAIM,IAAW,CACxBR,MAAO,EACPS,QAAQ,IAEYC,OAAOH,GAC7BI,KAAKC,UAAS,SAACP,EAAOhB,GAAR,MAAmB,CAC/Ba,mB,+BAKF,OACE,yBAAKZ,UAAU,aACb,wBAAIC,GAAG,cAAP,sBACA,yBAAKD,UAAU,OACb,yBAAKA,UAAU,iBACb,kBAACuB,EAAD,CAAiBhB,eAAgBc,KAAKd,kBAExC,yBAAKP,UAAU,iBACb,kBAAC,EAAD,CAAoBY,WAAYS,KAAKN,MAAMH,oB,GA9BrCY,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASX,OAAO,kBAAC,EAAD,MAASY,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3369aeef.chunk.js","sourcesContent":["import React from 'react';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport 'materialize-css/dist/js/materialize';\n\nconst EditorComponent = (props) => {\n  function handleTextChange(e){\n    const markdown = e.target.value;\n    props.submitMarkDown(markdown);\n  }\n\n  return (\n    <div>\n      <h4>Markdown Editor</h4>\n      <div className=\"input-field col s12\">\n        <textarea id=\"textarea1\" className=\"materialize-textarea\" onKeyUp={handleTextChange}></textarea>\n        <label htmlFor=\"textarea1\">Enter markdown here</label>\n      </div>\n    </div>\n  )\n}\n\nexport default EditorComponent;\n","import React from 'react';\nimport './Previewer.css';\n\nconst PreviewerComponent = (props) => {\n  const html = {\n    __html: props.htmlOutput\n  }\n  return (\n    <div>\n      <h4>Previewer</h4>\n      {props.htmlOutput ? <div dangerouslySetInnerHTML={html}/> : <p>'Enter text in the markdown editor'</p>}\n    </div>\n  )\n}\n\nexport default PreviewerComponent;\n","import React from 'react';\nimport { Remarkable } from 'remarkable';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport './App.css';\nimport EditorComponent from './components/editor/Editor';\nimport PreviewerComponent from './components/previewer/Previewer';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      htmlOutput: ''\n    }\n\n    this.submitMarkDown = this.submitMarkDown.bind(this);\n  }\n\n  submitMarkDown(str){\n    const md = new Remarkable({\n      html:  true,\n      breaks: true,\n    });\n    const htmlOutput = md.render(str);\n    this.setState((state, props) => ({\n      htmlOutput\n    }))\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n        <h1 id=\"app-header\">Markdown previewer</h1>\n        <div className=\"row\">\n          <div className=\"col s12 m6 l5\">\n            <EditorComponent submitMarkDown={this.submitMarkDown}/>\n          </div>\n          <div className=\"col s12 m6 l7\">\n            <PreviewerComponent htmlOutput={this.state.htmlOutput}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}